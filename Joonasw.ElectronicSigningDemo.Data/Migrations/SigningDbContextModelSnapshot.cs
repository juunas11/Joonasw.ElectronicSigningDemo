// <auto-generated />
using System;
using Joonasw.ElectronicSigningDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Joonasw.ElectronicSigningDemo.Data.Migrations
{
    [DbContext(typeof(SigningDbContext))]
    partial class SigningDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Joonasw.ElectronicSigningDemo.Data.Signer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DecidedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Signed")
                        .HasColumnType("bit");

                    b.Property<string>("WaitForSignatureInstanceId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("Email", "RequestId")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Signers");
                });

            modelBuilder.Entity("Joonasw.ElectronicSigningDemo.Data.SigningRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WorkflowCompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("WorkflowStartedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Joonasw.ElectronicSigningDemo.Data.Signer", b =>
                {
                    b.HasOne("Joonasw.ElectronicSigningDemo.Data.SigningRequest", "Request")
                        .WithMany("Signers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Joonasw.ElectronicSigningDemo.Data.SigningRequest", b =>
                {
                    b.OwnsOne("Joonasw.ElectronicSigningDemo.Data.WorkflowInstance", "Workflow", b1 =>
                        {
                            b1.Property<Guid>("SigningRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Id")
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("PurgeHistoryUrl")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.Property<string>("SendEventUrl")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.Property<string>("StatusQueryUrl")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.Property<string>("TerminateUrl")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.HasKey("SigningRequestId");

                            b1.ToTable("Requests");

                            b1.WithOwner()
                                .HasForeignKey("SigningRequestId");
                        });

                    b.Navigation("Workflow")
                        .IsRequired();
                });

            modelBuilder.Entity("Joonasw.ElectronicSigningDemo.Data.SigningRequest", b =>
                {
                    b.Navigation("Signers");
                });
#pragma warning restore 612, 618
        }
    }
}
